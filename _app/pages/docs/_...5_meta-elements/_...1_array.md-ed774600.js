var Qn=Object.defineProperty,Xn=Object.defineProperties;var sa=Object.getOwnPropertyDescriptors;var Pn=Object.getOwnPropertySymbols;var na=Object.prototype.hasOwnProperty,aa=Object.prototype.propertyIsEnumerable;var In=($,e,t)=>e in $?Qn($,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):$[e]=t,Ln=($,e)=>{for(var t in e||(e={}))na.call(e,t)&&In($,t,e[t]);if(Pn)for(var t of Pn(e))aa.call(e,t)&&In($,t,e[t]);return $},Vn=($,e)=>Xn($,sa(e));import{S as Mn,i as Un,s as Wn,w as A,k as y,e as o,t as m,x as u,m as i,c as p,a as r,h as F,d as a,y as g,g as v,M as s,j as cn,q as E,o as h,B as C,a5 as rn,_ as Zn,b as Gs,E as Kn,f as Ys}from"../../../chunks/index-9bffbb89.js";import{F as ea,B as ta,a as la,b as jn}from"../../../chunks/base-20d7510c.js";import{w as oa}from"../../../chunks/singletons-4999ee60.js";import{f as pa}from"../../../chunks/scroll-4d474ca9.js";import{C as ra}from"../../../chunks/CodeFence-4a2f990a.js";import{T as Ba}from"../../../chunks/TableWrapper-d1d3e506.js";import{C as S}from"../../../chunks/CodeInline-3773da5a.js";import{L as Bn}from"../../../chunks/Link-dae17348.js";import"../../../chunks/contexts-904695ee.js";import"../../../chunks/clsx.m-bc8192c6.js";function ca($){let e,t,l,d=JSON.stringify($[0],null,4)+"",_,D;return e=new ea({props:{form:$[1]}}),{c(){A(e.$$.fragment),t=y(),l=o("pre"),_=m(d)},l(c){u(e.$$.fragment,c),t=i(c),l=p(c,"PRE",{});var T=r(l);_=F(T,d),T.forEach(a)},m(c,T){g(e,c,T),v(c,t,T),v(c,l,T),s(l,_),D=!0},p(c,[T]){(!D||T&1)&&d!==(d=JSON.stringify(c[0],null,4)+"")&&cn(_,d)},i(c){D||(E(e.$$.fragment,c),D=!0)},o(c){h(e.$$.fragment,c),D=!1},d(c){C(e,c),c&&a(t),c&&a(l)}}}function ya($,e,t){let l;const d=oa(1),_=ta.newForm([{type:"array",name:"aliases",schema:la(jn()),count:d,element:{type:"input",label:"Alias",schema:jn()}},{type:"button",text:"+",click:()=>d.set(rn(d)+1),params:{class:"px-3 py-1 bg-green-700 text-white rounded mr-1"}},{type:"button",text:"-",click:()=>d.set(rn(d)-1),params:()=>{const c={class:"px-3 py-1 bg-red-700 text-white rounded disabled:bg-neutral-600"};return rn(d)<=0?Vn(Ln({},c),{disabled:!0}):c}}]),D=_.getData();return Zn($,D,c=>t(0,l=c)),[l,_,D]}class ia extends Mn{constructor(e){super(),Un(this,e,ya,ca,Wn,{})}}function fa($){let e;return{c(){e=m("#")},l(t){e=F(t,"#")},m(t,l){v(t,e,l)},d(t){t&&a(e)}}}function $a($){let e,t;return e=new S({props:{code:"BaseElement"}}),{c(){A(e.$$.fragment)},l(l){u(e.$$.fragment,l)},m(l,d){g(e,l,d),t=!0},p:Kn,i(l){t||(E(e.$$.fragment,l),t=!0)},o(l){h(e.$$.fragment,l),t=!1},d(l){C(e,l)}}}function da($){let e,t,l,d,_,D,c,T,O,z,rs,ts,H,Bs,I,ss,J,ls,b,w,M,k,Y,N,ns,os,L,V,j,U,n,B,as,P,R,es,x,Cs,cs,Js,_s,Ds,Ps,Is,gs,Ls,Vs,bs,ys,js,vs,is,Ms,q,Ts,fs,Us,ws,xs,Ws,Zs,Es,Ks,Qs,ks,$s,Xs,Rs,ds,sn,G,zs,ms,nn,Hs,Ns,an,en,hs,tn,ln,Ss,Fs,on,Os,As,pn,qs;return k=new S({props:{code:"name"}}),B=new S({props:{code:"string"}}),R=new S({props:{code:"aliases"}}),cs=new S({props:{code:"schema"}}),ys=new S({props:{code:"ZodArray"}}),is=new S({props:{code:"zod.array(zod.string())"}}),fs=new S({props:{code:"element"}}),$s=new S({props:{code:"Element"}}),ds=new S({props:{code:"{type: 'header', text: 'Hello'}"}}),ms=new S({props:{code:"count"}}),Fs=new S({props:{code:"Resolvable<number>"}}),As=new S({props:{code:"4"}}),{c(){e=o("table"),t=o("thead"),l=o("tr"),d=o("th"),_=m("Attribute"),D=y(),c=o("th"),T=m("Required"),O=y(),z=o("th"),rs=m("Description"),ts=y(),H=o("th"),Bs=m("Type"),I=y(),ss=o("th"),J=m("Example"),ls=y(),b=o("tbody"),w=o("tr"),M=o("td"),A(k.$$.fragment),Y=y(),N=o("td"),ns=o("strong"),os=m("Yes"),L=y(),V=o("td"),j=m("Name of the field"),U=y(),n=o("td"),A(B.$$.fragment),as=y(),P=o("td"),A(R.$$.fragment),es=y(),x=o("tr"),Cs=o("td"),A(cs.$$.fragment),Js=y(),_s=o("td"),Ds=o("strong"),Ps=m("Yes"),Is=y(),gs=o("td"),Ls=m("Validation schema"),Vs=y(),bs=o("td"),A(ys.$$.fragment),js=y(),vs=o("td"),A(is.$$.fragment),Ms=y(),q=o("tr"),Ts=o("td"),A(fs.$$.fragment),Us=y(),ws=o("td"),xs=o("strong"),Ws=m("Yes"),Zs=y(),Es=o("td"),Ks=m("The sub-element schema"),Qs=y(),ks=o("td"),A($s.$$.fragment),Xs=y(),Rs=o("td"),A(ds.$$.fragment),sn=y(),G=o("tr"),zs=o("td"),A(ms.$$.fragment),nn=y(),Hs=o("td"),Ns=o("strong"),an=m("Yes"),en=y(),hs=o("td"),tn=m("Count of array elements"),ln=y(),Ss=o("td"),A(Fs.$$.fragment),on=y(),Os=o("td"),A(As.$$.fragment),pn=y(),this.h()},l(f){e=p(f,"TABLE",{});var us=r(e);t=p(us,"THEAD",{});var yn=r(t);l=p(yn,"TR",{});var W=r(l);d=p(W,"TH",{});var fn=r(d);_=F(fn,"Attribute"),fn.forEach(a),D=i(W),c=p(W,"TH",{});var $n=r(c);T=F($n,"Required"),$n.forEach(a),O=i(W),z=p(W,"TH",{style:!0});var dn=r(z);rs=F(dn,"Description"),dn.forEach(a),ts=i(W),H=p(W,"TH",{});var mn=r(H);Bs=F(mn,"Type"),mn.forEach(a),I=i(W),ss=p(W,"TH",{});var Fn=r(ss);J=F(Fn,"Example"),Fn.forEach(a),W.forEach(a),yn.forEach(a),ls=i(us),b=p(us,"TBODY",{});var ps=r(b);w=p(ps,"TR",{});var Z=r(w);M=p(Z,"TD",{});var An=r(M);u(k.$$.fragment,An),An.forEach(a),Y=i(Z),N=p(Z,"TD",{});var un=r(N);ns=p(un,"STRONG",{});var gn=r(ns);os=F(gn,"Yes"),gn.forEach(a),un.forEach(a),L=i(Z),V=p(Z,"TD",{style:!0});var En=r(V);j=F(En,"Name of the field"),En.forEach(a),U=i(Z),n=p(Z,"TD",{});var hn=r(n);u(B.$$.fragment,hn),hn.forEach(a),as=i(Z),P=p(Z,"TD",{});var Cn=r(P);u(R.$$.fragment,Cn),Cn.forEach(a),Z.forEach(a),es=i(ps),x=p(ps,"TR",{});var K=r(x);Cs=p(K,"TD",{});var _n=r(Cs);u(cs.$$.fragment,_n),_n.forEach(a),Js=i(K),_s=p(K,"TD",{});var Dn=r(_s);Ds=p(Dn,"STRONG",{});var bn=r(Ds);Ps=F(bn,"Yes"),bn.forEach(a),Dn.forEach(a),Is=i(K),gs=p(K,"TD",{style:!0});var vn=r(gs);Ls=F(vn,"Validation schema"),vn.forEach(a),Vs=i(K),bs=p(K,"TD",{});var Tn=r(bs);u(ys.$$.fragment,Tn),Tn.forEach(a),js=i(K),vs=p(K,"TD",{});var wn=r(vs);u(is.$$.fragment,wn),wn.forEach(a),K.forEach(a),Ms=i(ps),q=p(ps,"TR",{});var Q=r(q);Ts=p(Q,"TD",{});var xn=r(Ts);u(fs.$$.fragment,xn),xn.forEach(a),Us=i(Q),ws=p(Q,"TD",{});var kn=r(ws);xs=p(kn,"STRONG",{});var Rn=r(xs);Ws=F(Rn,"Yes"),Rn.forEach(a),kn.forEach(a),Zs=i(Q),Es=p(Q,"TD",{style:!0});var zn=r(Es);Ks=F(zn,"The sub-element schema"),zn.forEach(a),Qs=i(Q),ks=p(Q,"TD",{});var Hn=r(ks);u($s.$$.fragment,Hn),Hn.forEach(a),Xs=i(Q),Rs=p(Q,"TD",{});var Nn=r(Rs);u(ds.$$.fragment,Nn),Nn.forEach(a),Q.forEach(a),sn=i(ps),G=p(ps,"TR",{});var X=r(G);zs=p(X,"TD",{});var Sn=r(zs);u(ms.$$.fragment,Sn),Sn.forEach(a),nn=i(X),Hs=p(X,"TD",{});var On=r(Hs);Ns=p(On,"STRONG",{});var Yn=r(Ns);an=F(Yn,"Yes"),Yn.forEach(a),On.forEach(a),en=i(X),hs=p(X,"TD",{style:!0});var qn=r(hs);tn=F(qn,"Count of array elements"),qn.forEach(a),ln=i(X),Ss=p(X,"TD",{});var Gn=r(Ss);u(Fs.$$.fragment,Gn),Gn.forEach(a),on=i(X),Os=p(X,"TD",{});var Jn=r(Os);u(As.$$.fragment,Jn),Jn.forEach(a),X.forEach(a),ps.forEach(a),pn=i(us),us.forEach(a),this.h()},h(){Ys(z,"text-align","left"),Ys(V,"text-align","left"),Ys(gs,"text-align","left"),Ys(Es,"text-align","left"),Ys(hs,"text-align","left")},m(f,us){v(f,e,us),s(e,t),s(t,l),s(l,d),s(d,_),s(l,D),s(l,c),s(c,T),s(l,O),s(l,z),s(z,rs),s(l,ts),s(l,H),s(H,Bs),s(l,I),s(l,ss),s(ss,J),s(e,ls),s(e,b),s(b,w),s(w,M),g(k,M,null),s(w,Y),s(w,N),s(N,ns),s(ns,os),s(w,L),s(w,V),s(V,j),s(w,U),s(w,n),g(B,n,null),s(w,as),s(w,P),g(R,P,null),s(b,es),s(b,x),s(x,Cs),g(cs,Cs,null),s(x,Js),s(x,_s),s(_s,Ds),s(Ds,Ps),s(x,Is),s(x,gs),s(gs,Ls),s(x,Vs),s(x,bs),g(ys,bs,null),s(x,js),s(x,vs),g(is,vs,null),s(b,Ms),s(b,q),s(q,Ts),g(fs,Ts,null),s(q,Us),s(q,ws),s(ws,xs),s(xs,Ws),s(q,Zs),s(q,Es),s(Es,Ks),s(q,Qs),s(q,ks),g($s,ks,null),s(q,Xs),s(q,Rs),g(ds,Rs,null),s(b,sn),s(b,G),s(G,zs),g(ms,zs,null),s(G,nn),s(G,Hs),s(Hs,Ns),s(Ns,an),s(G,en),s(G,hs),s(hs,tn),s(G,ln),s(G,Ss),g(Fs,Ss,null),s(G,on),s(G,Os),g(As,Os,null),s(e,pn),qs=!0},p:Kn,i(f){qs||(E(k.$$.fragment,f),E(B.$$.fragment,f),E(R.$$.fragment,f),E(cs.$$.fragment,f),E(ys.$$.fragment,f),E(is.$$.fragment,f),E(fs.$$.fragment,f),E($s.$$.fragment,f),E(ds.$$.fragment,f),E(ms.$$.fragment,f),E(Fs.$$.fragment,f),E(As.$$.fragment,f),qs=!0)},o(f){h(k.$$.fragment,f),h(B.$$.fragment,f),h(R.$$.fragment,f),h(cs.$$.fragment,f),h(ys.$$.fragment,f),h(is.$$.fragment,f),h(fs.$$.fragment,f),h($s.$$.fragment,f),h(ds.$$.fragment,f),h(ms.$$.fragment,f),h(Fs.$$.fragment,f),h(As.$$.fragment,f),qs=!1},d(f){f&&a(e),C(k),C(B),C(R),C(cs),C(ys),C(is),C(fs),C($s),C(ds),C(ms),C(Fs),C(As)}}}function ma($){let e;return{c(){e=m("#")},l(t){e=F(t,"#")},m(t,l){v(t,e,l)},d(t){t&&a(e)}}}function Fa($){let e,t=$[0].title+"",l,d,_,D=$[0].description+"",c,T,O,z,rs,ts,H,Bs,I,ss,J,ls,b,w,M,k,Y,N,ns,os,L,V,j,U;return z=new Bn({props:{class:"header-anchor",href:"#configuration","aria-hidden":"true",$$slots:{default:[fa]},$$scope:{ctx:$}}}),I=new S({props:{code:"array"}}),J=new Bn({props:{href:"/docs/configuration/base-element",$$slots:{default:[$a]},$$scope:{ctx:$}}}),k=new Ba({props:{$$slots:{default:[da]},$$scope:{ctx:$}}}),N=new Bn({props:{class:"header-anchor",href:"#example","aria-hidden":"true",$$slots:{default:[ma]},$$scope:{ctx:$}}}),L=new ia({}),j=new ra({props:{lang:"svelte",ext:"svelte",linesCount:52,rawCode:`<script&#8203 lang="ts">
  import { Base, Form } from '$lib';
  import { get, writable } from 'svelte/store';
  import * as zod from 'zod';

  const count = writable(1);

  const form = Base.newForm([
    {
      type: 'array',
      name: 'aliases',
      schema: zod.array(zod.boolean()),
      count,
      element: {
        type: 'input',
        label: 'Alias',
        schema: zod.boolean()
      }
    },
    {
      type: 'button',
      text: '+',
      click: () => count.set(get(count) + 1),
      params: {
        class: 'px-3 py-1 bg-green-700 text-white rounded mr-1'
      }
    },
    {
      type: 'button',
      text: '-',
      click: () => count.set(get(count) - 1),
      params: () => {
        const base = {
          class: 'px-3 py-1 bg-red-700 text-white rounded disabled:bg-neutral-600'
        };

        if (get(count) <= 0) {
          return { ...base, disabled: true };
        }

        return base;
      }
    }
  ] as const);

  const data = form.getData();
<\/script>

<Form {form} />

<pre>{JSON.stringify($data, null, 4)}</pre>
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E06C75">script</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">lang</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">&quot;ts&quot;</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">Base</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">Form</span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&#39;$lib&#39;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">get</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">writable</span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&#39;svelte/store&#39;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">*</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">as</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">zod</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&#39;zod&#39;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">count</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">writable</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">form</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">newForm</span><span style="color: #ABB2BF">([</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;array&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">name</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;aliases&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">schema</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">zod</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">array</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">zod</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">boolean</span><span style="color: #ABB2BF">()),</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">count</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">element</span><span style="color: #ABB2BF">: {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;input&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">label</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;Alias&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">schema</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">zod</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">boolean</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">      }</span></span>
<span class="line"><span style="color: #ABB2BF">    },</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;button&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">text</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;+&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #61AFEF">click</span><span style="color: #ABB2BF">: () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">count</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">set</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">get</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">count</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">params</span><span style="color: #ABB2BF">: {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">class</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;px-3 py-1 bg-green-700 text-white rounded mr-1&#39;</span></span>
<span class="line"><span style="color: #ABB2BF">      }</span></span>
<span class="line"><span style="color: #ABB2BF">    },</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;button&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">text</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;-&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #61AFEF">click</span><span style="color: #ABB2BF">: () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">count</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">set</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">get</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">count</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">),</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #61AFEF">params</span><span style="color: #ABB2BF">: () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">base</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> {</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">class</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;px-3 py-1 bg-red-700 text-white rounded disabled:bg-neutral-600&#39;</span></span>
<span class="line"><span style="color: #ABB2BF">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #61AFEF">get</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">count</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">&lt;=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> { ...</span><span style="color: #E06C75">base</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">disabled</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF"> };</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">base</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">      }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">  ] </span><span style="color: #C678DD">as</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">data</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">form</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getData</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">&lt;/</span><span style="color: #E06C75">script</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Form</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">{</span><span style="color: #E06C75">form</span><span style="color: #D19A66">}</span><span style="color: #ABB2BF"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E06C75">pre</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #D19A66">JSON</span><span style="color: #ABB2BF">.</span><span style="color: #56B6C2">stringify</span><span style="color: #ABB2BF">($</span><span style="color: #E06C75">data</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E06C75">pre</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"></span></code></pre>`}}),{c(){e=o("h1"),l=m(t),d=y(),_=o("p"),c=m(D),T=y(),O=o("h2"),A(z.$$.fragment),rs=m(" Configuration"),ts=y(),H=o("p"),Bs=m("The "),A(I.$$.fragment),ss=m(" element inherits all the attributes of "),A(J.$$.fragment),ls=y(),b=o("p"),w=m("In addition, it has the following attributes:"),M=y(),A(k.$$.fragment),Y=o("h2"),A(N.$$.fragment),ns=m(" Example"),os=y(),A(L.$$.fragment),V=y(),A(j.$$.fragment),this.h()},l(n){e=p(n,"H1",{});var B=r(e);l=F(B,t),B.forEach(a),d=i(n),_=p(n,"P",{});var as=r(_);c=F(as,D),as.forEach(a),T=i(n),O=p(n,"H2",{id:!0,tabindex:!0});var P=r(O);u(z.$$.fragment,P),rs=F(P," Configuration"),P.forEach(a),ts=i(n),H=p(n,"P",{});var R=r(H);Bs=F(R,"The "),u(I.$$.fragment,R),ss=F(R," element inherits all the attributes of "),u(J.$$.fragment,R),R.forEach(a),ls=i(n),b=p(n,"P",{});var es=r(b);w=F(es,"In addition, it has the following attributes:"),es.forEach(a),M=i(n),u(k.$$.fragment,n),Y=p(n,"H2",{id:!0,tabindex:!0});var x=r(Y);u(N.$$.fragment,x),ns=F(x," Example"),x.forEach(a),os=i(n),u(L.$$.fragment,n),V=i(n),u(j.$$.fragment,n),this.h()},h(){Gs(O,"id","configuration"),Gs(O,"tabindex","-1"),Gs(Y,"id","example"),Gs(Y,"tabindex","-1")},m(n,B){v(n,e,B),s(e,l),v(n,d,B),v(n,_,B),s(_,c),v(n,T,B),v(n,O,B),g(z,O,null),s(O,rs),v(n,ts,B),v(n,H,B),s(H,Bs),g(I,H,null),s(H,ss),g(J,H,null),v(n,ls,B),v(n,b,B),s(b,w),v(n,M,B),g(k,n,B),v(n,Y,B),g(N,Y,null),s(Y,ns),v(n,os,B),g(L,n,B),v(n,V,B),g(j,n,B),U=!0},p(n,[B]){(!U||B&1)&&t!==(t=n[0].title+"")&&cn(l,t),(!U||B&1)&&D!==(D=n[0].description+"")&&cn(c,D);const as={};B&2&&(as.$$scope={dirty:B,ctx:n}),z.$set(as);const P={};B&2&&(P.$$scope={dirty:B,ctx:n}),J.$set(P);const R={};B&2&&(R.$$scope={dirty:B,ctx:n}),k.$set(R);const es={};B&2&&(es.$$scope={dirty:B,ctx:n}),N.$set(es)},i(n){U||(E(z.$$.fragment,n),E(I.$$.fragment,n),E(J.$$.fragment,n),E(k.$$.fragment,n),E(N.$$.fragment,n),E(L.$$.fragment,n),E(j.$$.fragment,n),U=!0)},o(n){h(z.$$.fragment,n),h(I.$$.fragment,n),h(J.$$.fragment,n),h(k.$$.fragment,n),h(N.$$.fragment,n),h(L.$$.fragment,n),h(j.$$.fragment,n),U=!1},d(n){n&&a(e),n&&a(d),n&&a(_),n&&a(T),n&&a(O),C(z),n&&a(ts),n&&a(H),C(I),C(J),n&&a(ls),n&&a(b),n&&a(M),C(k,n),n&&a(Y),C(N),n&&a(os),C(L,n),n&&a(V),C(j,n)}}}function Aa($,e,t){let l;return Zn($,pa,d=>t(0,l=d)),[l]}class xa extends Mn{constructor(e){super(),Un(this,e,Aa,Fa,Wn,{})}}export{xa as default};
