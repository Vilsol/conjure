import{S as un,i as An,s as hn,w as h,k as i,e as p,t as y,x as g,m as f,c as r,a as c,h as d,d as e,y as E,g as A,M as n,j as Ls,q as _,o as C,B as D,_ as gn,b as Ts,E as En,f as ws}from"../../../chunks/index-9bffbb89.js";import{F as _n,B as Cn,o as Dn,s as Fn}from"../../../chunks/base-20d7510c.js";import{f as bn}from"../../../chunks/scroll-4d474ca9.js";import{C as vn}from"../../../chunks/CodeFence-4a2f990a.js";import{T as Tn}from"../../../chunks/TableWrapper-d1d3e506.js";import{C as L}from"../../../chunks/CodeInline-3773da5a.js";import{L as Is}from"../../../chunks/Link-dae17348.js";import"../../../chunks/singletons-4999ee60.js";import"../../../chunks/contexts-904695ee.js";import"../../../chunks/clsx.m-bc8192c6.js";function wn(F){let t,o,a,$=JSON.stringify(F[0],null,4)+"",u,b;return t=new _n({props:{form:F[1]}}),{c(){h(t.$$.fragment),o=i(),a=p("pre"),u=y($)},l(B){g(t.$$.fragment,B),o=f(B),a=r(B,"PRE",{});var v=c(a);u=d(v,$),v.forEach(e)},m(B,v){E(t,B,v),A(B,o,v),A(B,a,v),n(a,u),b=!0},p(B,[v]){(!b||v&1)&&$!==($=JSON.stringify(B[0],null,4)+"")&&Ls(u,$)},i(B){b||(_(t.$$.fragment,B),b=!0)},o(B){C(t.$$.fragment,B),b=!1},d(B){D(t,B),B&&e(o),B&&e(a)}}}function xn(F,t,o){let a;const $=Cn.newForm([{type:"object",name:"user",schema:Dn({}),elements:[{type:"input",name:"name",label:"Name",schema:Fn()},{type:"input",name:"email",label:"Email",schema:Fn().email()}]}]),u=$.getData();return gn(F,u,b=>o(0,a=b)),[a,$,u]}class jn extends un{constructor(t){super(),An(this,t,xn,wn,hn,{})}}function Nn(F){let t;return{c(){t=y("#")},l(o){t=d(o,"#")},m(o,a){A(o,t,a)},d(o){o&&e(t)}}}function zn(F){let t,o;return t=new L({props:{code:"BaseElement"}}),{c(){h(t.$$.fragment)},l(a){g(t.$$.fragment,a)},m(a,$){E(t,a,$),o=!0},p:En,i(a){o||(_(t.$$.fragment,a),o=!0)},o(a){C(t.$$.fragment,a),o=!1},d(a){D(t,a)}}}function Hn(F){let t,o,a,$,u,b,B,v,R,z,ls,es,H,os,J,Q,Y,ts,x,T,V,j,S,O,X,as,P,G,I,M,s,l,ss,q,N,ns,w,Fs,ps,xs,us,As,js,Ns,$s,zs,Hs,hs,rs,Os,gs,cs,Rs,k,Es,Bs,Ss,_s,Cs,ks,Ys,ys,qs,Js,Ds,is,Ps,bs,fs,Gs,vs;return j=new L({props:{code:"name"}}),l=new L({props:{code:"string"}}),N=new L({props:{code:"user"}}),ps=new L({props:{code:"schema"}}),rs=new L({props:{code:"ZodObject"}}),cs=new L({props:{code:"zod.object({})"}}),Bs=new L({props:{code:"elements"}}),is=new L({props:{code:"Element[]"}}),fs=new L({props:{code:"[{type: 'header', text: 'Hello'}]"}}),{c(){t=p("table"),o=p("thead"),a=p("tr"),$=p("th"),u=y("Attribute"),b=i(),B=p("th"),v=y("Required"),R=i(),z=p("th"),ls=y("Description"),es=i(),H=p("th"),os=y("Type"),J=i(),Q=p("th"),Y=y("Example"),ts=i(),x=p("tbody"),T=p("tr"),V=p("td"),h(j.$$.fragment),S=i(),O=p("td"),X=p("strong"),as=y("Yes"),P=i(),G=p("td"),I=y("Name of the field"),M=i(),s=p("td"),h(l.$$.fragment),ss=i(),q=p("td"),h(N.$$.fragment),ns=i(),w=p("tr"),Fs=p("td"),h(ps.$$.fragment),xs=i(),us=p("td"),As=p("strong"),js=y("Yes"),Ns=i(),$s=p("td"),zs=y("Validation schema"),Hs=i(),hs=p("td"),h(rs.$$.fragment),Os=i(),gs=p("td"),h(cs.$$.fragment),Rs=i(),k=p("tr"),Es=p("td"),h(Bs.$$.fragment),Ss=i(),_s=p("td"),Cs=p("strong"),ks=y("Yes"),Ys=i(),ys=p("td"),qs=y("The sub-elements schema"),Js=i(),Ds=p("td"),h(is.$$.fragment),Ps=i(),bs=p("td"),h(fs.$$.fragment),Gs=i(),this.h()},l(m){t=r(m,"TABLE",{});var ms=c(t);o=r(ms,"THEAD",{});var Vs=c(o);a=r(Vs,"TR",{});var U=c(a);$=r(U,"TH",{});var Ms=c($);u=d(Ms,"Attribute"),Ms.forEach(e),b=f(U),B=r(U,"TH",{});var Us=c(B);v=d(Us,"Required"),Us.forEach(e),R=f(U),z=r(U,"TH",{style:!0});var Ws=c(z);ls=d(Ws,"Description"),Ws.forEach(e),es=f(U),H=r(U,"TH",{});var Zs=c(H);os=d(Zs,"Type"),Zs.forEach(e),J=f(U),Q=r(U,"TH",{});var Ks=c(Q);Y=d(Ks,"Example"),Ks.forEach(e),U.forEach(e),Vs.forEach(e),ts=f(ms),x=r(ms,"TBODY",{});var ds=c(x);T=r(ds,"TR",{});var W=c(T);V=r(W,"TD",{});var Qs=c(V);g(j.$$.fragment,Qs),Qs.forEach(e),S=f(W),O=r(W,"TD",{});var Xs=c(O);X=r(Xs,"STRONG",{});var sn=c(X);as=d(sn,"Yes"),sn.forEach(e),Xs.forEach(e),P=f(W),G=r(W,"TD",{style:!0});var nn=c(G);I=d(nn,"Name of the field"),nn.forEach(e),M=f(W),s=r(W,"TD",{});var en=c(s);g(l.$$.fragment,en),en.forEach(e),ss=f(W),q=r(W,"TD",{});var tn=c(q);g(N.$$.fragment,tn),tn.forEach(e),W.forEach(e),ns=f(ds),w=r(ds,"TR",{});var Z=c(w);Fs=r(Z,"TD",{});var an=c(Fs);g(ps.$$.fragment,an),an.forEach(e),xs=f(Z),us=r(Z,"TD",{});var ln=c(us);As=r(ln,"STRONG",{});var on=c(As);js=d(on,"Yes"),on.forEach(e),ln.forEach(e),Ns=f(Z),$s=r(Z,"TD",{style:!0});var pn=c($s);zs=d(pn,"Validation schema"),pn.forEach(e),Hs=f(Z),hs=r(Z,"TD",{});var rn=c(hs);g(rs.$$.fragment,rn),rn.forEach(e),Os=f(Z),gs=r(Z,"TD",{});var cn=c(gs);g(cs.$$.fragment,cn),cn.forEach(e),Z.forEach(e),Rs=f(ds),k=r(ds,"TR",{});var K=c(k);Es=r(K,"TD",{});var Bn=c(Es);g(Bs.$$.fragment,Bn),Bn.forEach(e),Ss=f(K),_s=r(K,"TD",{});var fn=c(_s);Cs=r(fn,"STRONG",{});var mn=c(Cs);ks=d(mn,"Yes"),mn.forEach(e),fn.forEach(e),Ys=f(K),ys=r(K,"TD",{style:!0});var $n=c(ys);qs=d($n,"The sub-elements schema"),$n.forEach(e),Js=f(K),Ds=r(K,"TD",{});var yn=c(Ds);g(is.$$.fragment,yn),yn.forEach(e),Ps=f(K),bs=r(K,"TD",{});var dn=c(bs);g(fs.$$.fragment,dn),dn.forEach(e),K.forEach(e),ds.forEach(e),Gs=f(ms),ms.forEach(e),this.h()},h(){ws(z,"text-align","left"),ws(G,"text-align","left"),ws($s,"text-align","left"),ws(ys,"text-align","left")},m(m,ms){A(m,t,ms),n(t,o),n(o,a),n(a,$),n($,u),n(a,b),n(a,B),n(B,v),n(a,R),n(a,z),n(z,ls),n(a,es),n(a,H),n(H,os),n(a,J),n(a,Q),n(Q,Y),n(t,ts),n(t,x),n(x,T),n(T,V),E(j,V,null),n(T,S),n(T,O),n(O,X),n(X,as),n(T,P),n(T,G),n(G,I),n(T,M),n(T,s),E(l,s,null),n(T,ss),n(T,q),E(N,q,null),n(x,ns),n(x,w),n(w,Fs),E(ps,Fs,null),n(w,xs),n(w,us),n(us,As),n(As,js),n(w,Ns),n(w,$s),n($s,zs),n(w,Hs),n(w,hs),E(rs,hs,null),n(w,Os),n(w,gs),E(cs,gs,null),n(x,Rs),n(x,k),n(k,Es),E(Bs,Es,null),n(k,Ss),n(k,_s),n(_s,Cs),n(Cs,ks),n(k,Ys),n(k,ys),n(ys,qs),n(k,Js),n(k,Ds),E(is,Ds,null),n(k,Ps),n(k,bs),E(fs,bs,null),n(t,Gs),vs=!0},p:En,i(m){vs||(_(j.$$.fragment,m),_(l.$$.fragment,m),_(N.$$.fragment,m),_(ps.$$.fragment,m),_(rs.$$.fragment,m),_(cs.$$.fragment,m),_(Bs.$$.fragment,m),_(is.$$.fragment,m),_(fs.$$.fragment,m),vs=!0)},o(m){C(j.$$.fragment,m),C(l.$$.fragment,m),C(N.$$.fragment,m),C(ps.$$.fragment,m),C(rs.$$.fragment,m),C(cs.$$.fragment,m),C(Bs.$$.fragment,m),C(is.$$.fragment,m),C(fs.$$.fragment,m),vs=!1},d(m){m&&e(t),D(j),D(l),D(N),D(ps),D(rs),D(cs),D(Bs),D(is),D(fs)}}}function On(F){let t;return{c(){t=y("#")},l(o){t=d(o,"#")},m(o,a){A(o,t,a)},d(o){o&&e(t)}}}function Rn(F){let t,o=F[0].title+"",a,$,u,b=F[0].description+"",B,v,R,z,ls,es,H,os,J,Q,Y,ts,x,T,V,j,S,O,X,as,P,G,I,M;return z=new Is({props:{class:"header-anchor",href:"#configuration","aria-hidden":"true",$$slots:{default:[Nn]},$$scope:{ctx:F}}}),J=new L({props:{code:"object"}}),Y=new Is({props:{href:"/docs/configuration/base-element",$$slots:{default:[zn]},$$scope:{ctx:F}}}),j=new Tn({props:{$$slots:{default:[Hn]},$$scope:{ctx:F}}}),O=new Is({props:{class:"header-anchor",href:"#example","aria-hidden":"true",$$slots:{default:[On]},$$scope:{ctx:F}}}),P=new jn({}),I=new vn({props:{lang:"svelte",ext:"svelte",linesCount:33,rawCode:`<script&#8203 lang="ts">
  import { Base, Form } from '$lib';
  import * as zod from 'zod';

  const form = Base.newForm([
    {
      type: 'object',
      name: 'user',
      schema: zod.object({}),
      elements: [
        {
          type: 'input',
          name: 'name',
          label: 'Name',
          schema: zod.string()
        },
        {
          type: 'input',
          name: 'email',
          label: 'Email',
          schema: zod.string().email()
        }
      ]
    }
  ] as const);

  const data = form.getData();
<\/script>

<Form {form} />

<pre>{JSON.stringify($data, null, 4)}</pre>
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E06C75">script</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">lang</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">&quot;ts&quot;</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">Base</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">Form</span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&#39;$lib&#39;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">*</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">as</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">zod</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&#39;zod&#39;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">form</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Base</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">newForm</span><span style="color: #ABB2BF">([</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;object&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">name</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;user&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">schema</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">zod</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">object</span><span style="color: #ABB2BF">({}),</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">elements</span><span style="color: #ABB2BF">: [</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;input&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">name</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;name&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">label</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;Name&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">schema</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">zod</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">string</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">        },</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">type</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;input&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">name</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;email&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">label</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&#39;Email&#39;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">          </span><span style="color: #E06C75">schema</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">zod</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">string</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">email</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">      ]</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">  ] </span><span style="color: #C678DD">as</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">data</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">form</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getData</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">&lt;/</span><span style="color: #E06C75">script</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Form</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">{</span><span style="color: #E06C75">form</span><span style="color: #D19A66">}</span><span style="color: #ABB2BF"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E06C75">pre</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #D19A66">JSON</span><span style="color: #ABB2BF">.</span><span style="color: #56B6C2">stringify</span><span style="color: #ABB2BF">($</span><span style="color: #E06C75">data</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E06C75">pre</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"></span></code></pre>`}}),{c(){t=p("h1"),a=y(o),$=i(),u=p("p"),B=y(b),v=i(),R=p("h2"),h(z.$$.fragment),ls=y(" Configuration"),es=i(),H=p("p"),os=y("The "),h(J.$$.fragment),Q=y(" element inherits all the attributes of "),h(Y.$$.fragment),ts=i(),x=p("p"),T=y("In addition, it has the following attributes:"),V=i(),h(j.$$.fragment),S=p("h2"),h(O.$$.fragment),X=y(" Example"),as=i(),h(P.$$.fragment),G=i(),h(I.$$.fragment),this.h()},l(s){t=r(s,"H1",{});var l=c(t);a=d(l,o),l.forEach(e),$=f(s),u=r(s,"P",{});var ss=c(u);B=d(ss,b),ss.forEach(e),v=f(s),R=r(s,"H2",{id:!0,tabindex:!0});var q=c(R);g(z.$$.fragment,q),ls=d(q," Configuration"),q.forEach(e),es=f(s),H=r(s,"P",{});var N=c(H);os=d(N,"The "),g(J.$$.fragment,N),Q=d(N," element inherits all the attributes of "),g(Y.$$.fragment,N),N.forEach(e),ts=f(s),x=r(s,"P",{});var ns=c(x);T=d(ns,"In addition, it has the following attributes:"),ns.forEach(e),V=f(s),g(j.$$.fragment,s),S=r(s,"H2",{id:!0,tabindex:!0});var w=c(S);g(O.$$.fragment,w),X=d(w," Example"),w.forEach(e),as=f(s),g(P.$$.fragment,s),G=f(s),g(I.$$.fragment,s),this.h()},h(){Ts(R,"id","configuration"),Ts(R,"tabindex","-1"),Ts(S,"id","example"),Ts(S,"tabindex","-1")},m(s,l){A(s,t,l),n(t,a),A(s,$,l),A(s,u,l),n(u,B),A(s,v,l),A(s,R,l),E(z,R,null),n(R,ls),A(s,es,l),A(s,H,l),n(H,os),E(J,H,null),n(H,Q),E(Y,H,null),A(s,ts,l),A(s,x,l),n(x,T),A(s,V,l),E(j,s,l),A(s,S,l),E(O,S,null),n(S,X),A(s,as,l),E(P,s,l),A(s,G,l),E(I,s,l),M=!0},p(s,[l]){(!M||l&1)&&o!==(o=s[0].title+"")&&Ls(a,o),(!M||l&1)&&b!==(b=s[0].description+"")&&Ls(B,b);const ss={};l&2&&(ss.$$scope={dirty:l,ctx:s}),z.$set(ss);const q={};l&2&&(q.$$scope={dirty:l,ctx:s}),Y.$set(q);const N={};l&2&&(N.$$scope={dirty:l,ctx:s}),j.$set(N);const ns={};l&2&&(ns.$$scope={dirty:l,ctx:s}),O.$set(ns)},i(s){M||(_(z.$$.fragment,s),_(J.$$.fragment,s),_(Y.$$.fragment,s),_(j.$$.fragment,s),_(O.$$.fragment,s),_(P.$$.fragment,s),_(I.$$.fragment,s),M=!0)},o(s){C(z.$$.fragment,s),C(J.$$.fragment,s),C(Y.$$.fragment,s),C(j.$$.fragment,s),C(O.$$.fragment,s),C(P.$$.fragment,s),C(I.$$.fragment,s),M=!1},d(s){s&&e(t),s&&e($),s&&e(u),s&&e(v),s&&e(R),D(z),s&&e(es),s&&e(H),D(J),D(Y),s&&e(ts),s&&e(x),s&&e(V),D(j,s),s&&e(S),D(O),s&&e(as),D(P,s),s&&e(G),D(I,s)}}}function Sn(F,t,o){let a;return gn(F,bn,$=>o(0,a=$)),[a]}class Un extends un{constructor(t){super(),An(this,t,Sn,Rn,hn,{})}}export{Un as default};
